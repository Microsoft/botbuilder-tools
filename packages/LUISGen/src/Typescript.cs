// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace LUISGen
{
    class Typescript
    {
        static void Header(string description, string className, Writer w)
        {
            w.WriteLine($@"/**
* <auto-generated>
* Code generated by {description}
* Tool github: https://github.com/microsoft/botbuilder-tools
* Changes may cause incorrect behavior and will be lost if the code is
* regenerated.
* </auto-generated>
*/ 
import {{DateTimeSpec, IntentData, InstanceData, NumberWithUnits}} from 'botbuilder-ai';");
        }

        static void Intents(dynamic app, Writer w)
        {
            w.WriteLine();
            w.IndentLine("export interface _Intents { ");
            w.Indent();
            foreach (var intent in app.intents)
            {
                w.IndentLine($"{Utils.NormalizeName(intent.name)}: IntentData;");
            }
            w.Outdent();
            w.WriteLine("};");
        }

        static string PropertyName(dynamic name, dynamic app)
        {
            return Utils.JsonPropertyName(name, app);
        }

        static void WriteEntity(dynamic entity, dynamic type, dynamic app, Writer w)
        {
            Utils.EntityApply((JObject)entity, (name) =>
            {
                var realName = PropertyName(name, app);
                switch ((string)type)
                {
                    case "age":
                    case "dimension":
                    case "money":
                    case "temperature":
                        w.IndentLine($"{realName}?: NumberWithUnits[];");
                        break;
                    case "number":
                    case "ordinal":
                    case "percentage":
                        w.IndentLine($"{realName}?: number[];");
                        break;
                    case "datetimeV2":
                        w.IndentLine($"{realName}?: DateTimeSpec[];");
                        break;
                    case "list":
                        w.IndentLine($"{realName}?: string[][];");
                        break;
                    default:
                        w.IndentLine($"{realName}?: string[];");
                        break;
                }
            });
        }

        static void WriteEntities(dynamic entities, dynamic app, string description, Writer w)
        {
            if (entities != null && entities.Count > 0)
            {
                w.WriteLine();
                w.IndentLine($"// {description}");
                foreach (var entity in entities)
                {
                    WriteEntity(entity, Utils.IsList(entity.name, app) ? "list" : entity.name, app, w);
                }
            }
        }

        static void Entities(dynamic app, Writer w)
        {
            // Composite instance and data
            if (app.composites != null)
            {
                foreach (var composite in app.composites)
                {
                    var name = Utils.NormalizeName(composite.name);
                    w.WriteLine();
                    w.IndentLine($"export interface _Instance{name} {{");
                    w.Indent();
                    foreach (var child in composite.children)
                    {
                        w.IndentLine($"{PropertyName(child, app)}?: InstanceData[];");
                    }
                    w.Outdent();
                    w.IndentLine("}");
                    w.IndentLine($"export interface {name} {{");
                    w.Indent();
                    foreach (var child in composite.children)
                    {
                        WriteEntity(Utils.Entity(child), Utils.IsList(child, app) ? "list" : child, app, w);
                    }
                    w.IndentLine($"$instance?: _Instance{name};");
                    w.Outdent();
                    w.IndentLine("}");
                }
            }
            w.WriteLine();

            // Entity instance
            w.IndentLine("export interface _Instance {");
            w.Indent();
            Utils.WriteInstances((JObject)app, (name) =>
            {
                w.IndentLine($"{PropertyName(name, app)}?: InstanceData[];");
            });
            w.Outdent();
            w.IndentLine("}");

            // Entities
            w.WriteLine();
            w.IndentLine("export interface _Entities {");
            w.Indent();
            if (app.entities != null && app.entities.Count > 0)
            {
                w.IndentLine("// Simple entities");
                foreach (var entity in app.entities)
                {
                    WriteEntity(entity, entity.name, app, w);
                    if (entity.children != null)
                    {
                        // Hierarchical
                        foreach (var child in entity.children)
                        {
                            WriteEntity(Utils.Entity(child), child, app, w);
                        }
                    }
                }
            }
            WriteEntities(app.prebuiltEntities, app, "Built-in entities", w);
            WriteEntities(app.closedLists, app, "Lists", w);
            WriteEntities(app.regex_entities, app, "Regex entities", w);
            WriteEntities(app.patternAnyEntities, app, "Pattern.any", w);

            // Composites
            if (app.composites != null && app.composites.Count > 0)
            {
                w.WriteLine();
                w.IndentLine("// Composites");
                foreach (var composite in app.composites)
                {
                    var name = PropertyName(composite.name, app);
                    w.IndentLine($"{name}?: {name}[];");
                }
            }

            w.IndentLine($"$instance : _Instance;");
            w.Outdent();
            w.IndentLine("}");
        }

        static void Class(string className, Writer w)
        {
            w.WriteLine();
            w.IndentLine($"export interface {className} {{");
            w.Indent();
            w.IndentLine("text: string;");
            w.IndentLine("alteredText?: string;");
            w.IndentLine("intents: _Intents;");
            w.IndentLine("entities: _Entities;");
            w.IndentLine("[propName: string]: any;");
            w.Outdent();
            w.IndentLine("}");
        }

        public static void Generate(string description, dynamic app, string className, string outPath)
        {
            var outName = Path.Combine(outPath, $"{className}.ts");
            Console.WriteLine($"Generating file {outName} that contains interface {className}.");
            var w = new Writer(outName);
            Header(description, className, w);
            Intents(app, w);
            Entities(app, w);
            Class(className, w);
            w.Close();
        }
    }
}
