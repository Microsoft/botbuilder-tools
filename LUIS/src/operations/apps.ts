/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/appsMappers";
import * as Parameters from "../models/parameters";
import { LuisAuthoringContext } from "../luisAuthoringContext";

/** Class representing a Apps. */
export class Apps {
  private readonly client: LuisAuthoringContext;

  /**
   * Create a Apps.
   * @param {LuisAuthoringContext} client Reference to the service client.
   */
  constructor(client: LuisAuthoringContext) {
    this.client = client;
  }

  /**
   * Creates a new LUIS app.
   *
   * @param {ApplicationCreateObject} applicationCreateObject A model containing Name, Description
   * (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID
   * (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot
   * be changed after the app is created.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  addWithHttpOperationResponse(applicationCreateObject: Models.ApplicationCreateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string>> {
    return this.client.sendOperationRequest(
      {
        applicationCreateObject,
        options
      },
      addOperationSpec);
  }

  /**
   * Lists all of the user applications.
   *
   * @param {AppsListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listWithHttpOperationResponse(options?: Models.AppsListOptionalParams): Promise<msRest.HttpOperationResponse<Models.ApplicationInfoResponse[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec);
  }

  /**
   * Imports an application to LUIS, the application's structure should be included in in the request
   * body.
   *
   * @param {LuisApp} luisApp A LUIS application structure.
   *
   * @param {AppsImportMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  importMethodWithHttpOperationResponse(luisApp: Models.LuisApp, options?: Models.AppsImportMethodOptionalParams): Promise<msRest.HttpOperationResponse<string>> {
    return this.client.sendOperationRequest(
      {
        luisApp,
        options
      },
      importMethodOperationSpec);
  }

  /**
   * Gets the endpoint URLs for the prebuilt Cortana applications.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listCortanaEndpointsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PersonalAssistantsResponse>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listCortanaEndpointsOperationSpec);
  }

  /**
   * Gets the available application domains.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listDomainsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listDomainsOperationSpec);
  }

  /**
   * Gets the application available usage scenarios.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listUsageScenariosWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listUsageScenariosOperationSpec);
  }

  /**
   * Gets the supported application cultures.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listSupportedCulturesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.AvailableCulture[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listSupportedCulturesOperationSpec);
  }

  /**
   * Gets the query logs of the past month for the application.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  downloadQueryLogsWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      downloadQueryLogsOperationSpec);
  }

  /**
   * Gets the application info.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationInfoResponse>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      getOperationSpec);
  }

  /**
   * Updates the name or description of the application.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationUpdateObject} applicationUpdateObject A model containing Name and Description
   * of the application.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateWithHttpOperationResponse(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        appId,
        applicationUpdateObject,
        options
      },
      updateOperationSpec);
  }

  /**
   * Deletes an application.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethodWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      deleteMethodOperationSpec);
  }

  /**
   * Publishes a specific version of the application.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationPublishObject} applicationPublishObject The application publish object. The
   * region is the target region that the application is published to.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  publishWithHttpOperationResponse(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductionOrStagingEndpointInfo>> {
    return this.client.sendOperationRequest(
      {
        appId,
        applicationPublishObject,
        options
      },
      publishOperationSpec);
  }

  /**
   * Get the application settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSettingsWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationSettings>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      getSettingsOperationSpec);
  }

  /**
   * Updates the application settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationSettingUpdateObject} applicationSettingUpdateObject An object containing the
   * new application settings.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateSettingsWithHttpOperationResponse(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        appId,
        applicationSettingUpdateObject,
        options
      },
      updateSettingsOperationSpec);
  }

  /**
   * Get the application publish settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPublishSettingsWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PublishSettings>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      getPublishSettingsOperationSpec);
  }

  /**
   * Updates the application publish settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {PublishSettingUpdateObject} publishSettingUpdateObject An object containing the new
   * publish application settings.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updatePublishSettingsWithHttpOperationResponse(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        appId,
        publishSettingUpdateObject,
        options
      },
      updatePublishSettingsOperationSpec);
  }

  /**
   * Returns the available endpoint deployment regions and URLs.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listEndpointsWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      listEndpointsOperationSpec);
  }

  /**
   * Gets all the available custom prebuilt domains for all cultures.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableCustomPrebuiltDomainsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PrebuiltDomain[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAvailableCustomPrebuiltDomainsOperationSpec);
  }

  /**
   * Adds a prebuilt domain along with its models as a new application.
   *
   * @param {PrebuiltDomainCreateObject} prebuiltDomainCreateObject A prebuilt domain create object
   * containing the name and culture of the domain.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  addCustomPrebuiltDomainWithHttpOperationResponse(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string>> {
    return this.client.sendOperationRequest(
      {
        prebuiltDomainCreateObject,
        options
      },
      addCustomPrebuiltDomainOperationSpec);
  }

  /**
   * Gets all the available custom prebuilt domains for a specific culture.
   *
   * @param {string} culture Culture.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse(culture: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PrebuiltDomain[]>> {
    return this.client.sendOperationRequest(
      {
        culture,
        options
      },
      listAvailableCustomPrebuiltDomainsForCultureOperationSpec);
  }

  /**
   * Creates a new LUIS app.
   *
   * @param {ApplicationCreateObject} applicationCreateObject A model containing Name, Description
   * (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID
   * (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot
   * be changed after the app is created.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  add(applicationCreateObject: Models.ApplicationCreateObject): Promise<string>;
  add(applicationCreateObject: Models.ApplicationCreateObject, options: msRest.RequestOptionsBase): Promise<string>;
  add(applicationCreateObject: Models.ApplicationCreateObject, callback: msRest.ServiceCallback<string>): void;
  add(applicationCreateObject: Models.ApplicationCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  add(applicationCreateObject: Models.ApplicationCreateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.addWithHttpOperationResponse.bind(this), applicationCreateObject, options, callback);
  }

  /**
   * Lists all of the user applications.
   *
   * @param {AppsListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationInfoResponse[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(): Promise<Models.ApplicationInfoResponse[]>;
  list(options: Models.AppsListOptionalParams): Promise<Models.ApplicationInfoResponse[]>;
  list(callback: msRest.ServiceCallback<Models.ApplicationInfoResponse[]>): void;
  list(options: Models.AppsListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse[]>): void;
  list(options?: Models.AppsListOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationInfoResponse[]>): any {
    return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Imports an application to LUIS, the application's structure should be included in in the request
   * body.
   *
   * @param {LuisApp} luisApp A LUIS application structure.
   *
   * @param {AppsImportMethodOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  importMethod(luisApp: Models.LuisApp): Promise<string>;
  importMethod(luisApp: Models.LuisApp, options: Models.AppsImportMethodOptionalParams): Promise<string>;
  importMethod(luisApp: Models.LuisApp, callback: msRest.ServiceCallback<string>): void;
  importMethod(luisApp: Models.LuisApp, options: Models.AppsImportMethodOptionalParams, callback: msRest.ServiceCallback<string>): void;
  importMethod(luisApp: Models.LuisApp, options?: Models.AppsImportMethodOptionalParams, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.importMethodWithHttpOperationResponse.bind(this), luisApp, options, callback);
  }

  /**
   * Gets the endpoint URLs for the prebuilt Cortana applications.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PersonalAssistantsResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PersonalAssistantsResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listCortanaEndpoints(): Promise<Models.PersonalAssistantsResponse>;
  listCortanaEndpoints(options: msRest.RequestOptionsBase): Promise<Models.PersonalAssistantsResponse>;
  listCortanaEndpoints(callback: msRest.ServiceCallback<Models.PersonalAssistantsResponse>): void;
  listCortanaEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersonalAssistantsResponse>): void;
  listCortanaEndpoints(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PersonalAssistantsResponse>): any {
    return msRest.responseToBody(this.listCortanaEndpointsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets the available application domains.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listDomains(): Promise<string[]>;
  listDomains(options: msRest.RequestOptionsBase): Promise<string[]>;
  listDomains(callback: msRest.ServiceCallback<string[]>): void;
  listDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  listDomains(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.listDomainsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets the application available usage scenarios.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listUsageScenarios(): Promise<string[]>;
  listUsageScenarios(options: msRest.RequestOptionsBase): Promise<string[]>;
  listUsageScenarios(callback: msRest.ServiceCallback<string[]>): void;
  listUsageScenarios(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  listUsageScenarios(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.listUsageScenariosWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets the supported application cultures.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.AvailableCulture[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listSupportedCultures(): Promise<Models.AvailableCulture[]>;
  listSupportedCultures(options: msRest.RequestOptionsBase): Promise<Models.AvailableCulture[]>;
  listSupportedCultures(callback: msRest.ServiceCallback<Models.AvailableCulture[]>): void;
  listSupportedCultures(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableCulture[]>): void;
  listSupportedCultures(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.AvailableCulture[]>): any {
    return msRest.responseToBody(this.listSupportedCulturesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets the application info.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationInfoResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationInfoResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(appId: string): Promise<Models.ApplicationInfoResponse>;
  get(appId: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationInfoResponse>;
  get(appId: string, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse>): void;
  get(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse>): void;
  get(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationInfoResponse>): any {
    return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), appId, options, callback);
  }

  /**
   * Updates the name or description of the application.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationUpdateObject} applicationUpdateObject A model containing Name and Description
   * of the application.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject): Promise<Models.OperationStatus>;
  update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), appId, applicationUpdateObject, options, callback);
  }

  /**
   * Deletes an application.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(appId: string): Promise<Models.OperationStatus>;
  deleteMethod(appId: string, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  deleteMethod(appId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteMethod(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteMethod(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), appId, options, callback);
  }

  /**
   * Publishes a specific version of the application.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationPublishObject} applicationPublishObject The application publish object. The
   * region is the target region that the application is published to.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductionOrStagingEndpointInfo} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductionOrStagingEndpointInfo} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject): Promise<Models.ProductionOrStagingEndpointInfo>;
  publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options: msRest.RequestOptionsBase): Promise<Models.ProductionOrStagingEndpointInfo>;
  publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, callback: msRest.ServiceCallback<Models.ProductionOrStagingEndpointInfo>): void;
  publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductionOrStagingEndpointInfo>): void;
  publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductionOrStagingEndpointInfo>): any {
    return msRest.responseToBody(this.publishWithHttpOperationResponse.bind(this), appId, applicationPublishObject, options, callback);
  }

  /**
   * Get the application settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationSettings} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationSettings} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSettings(appId: string): Promise<Models.ApplicationSettings>;
  getSettings(appId: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationSettings>;
  getSettings(appId: string, callback: msRest.ServiceCallback<Models.ApplicationSettings>): void;
  getSettings(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationSettings>): void;
  getSettings(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationSettings>): any {
    return msRest.responseToBody(this.getSettingsWithHttpOperationResponse.bind(this), appId, options, callback);
  }

  /**
   * Updates the application settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {ApplicationSettingUpdateObject} applicationSettingUpdateObject An object containing the
   * new application settings.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject): Promise<Models.OperationStatus>;
  updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.updateSettingsWithHttpOperationResponse.bind(this), appId, applicationSettingUpdateObject, options, callback);
  }

  /**
   * Get the application publish settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PublishSettings} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PublishSettings} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPublishSettings(appId: string): Promise<Models.PublishSettings>;
  getPublishSettings(appId: string, options: msRest.RequestOptionsBase): Promise<Models.PublishSettings>;
  getPublishSettings(appId: string, callback: msRest.ServiceCallback<Models.PublishSettings>): void;
  getPublishSettings(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublishSettings>): void;
  getPublishSettings(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PublishSettings>): any {
    return msRest.responseToBody(this.getPublishSettingsWithHttpOperationResponse.bind(this), appId, options, callback);
  }

  /**
   * Updates the application publish settings.
   *
   * @param {string} appId The application ID.
   *
   * @param {PublishSettingUpdateObject} publishSettingUpdateObject An object containing the new
   * publish application settings.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject): Promise<Models.OperationStatus>;
  updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.updatePublishSettingsWithHttpOperationResponse.bind(this), appId, publishSettingUpdateObject, options, callback);
  }

  /**
   * Returns the available endpoint deployment regions and URLs.
   *
   * @param {string} appId The application ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listEndpoints(appId: string): Promise<{ [propertyName: string]: string }>;
  listEndpoints(appId: string, options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }>;
  listEndpoints(appId: string, callback: msRest.ServiceCallback<{ [propertyName: string]: string }>): void;
  listEndpoints(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }>): void;
  listEndpoints(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }>): any {
    return msRest.responseToBody(this.listEndpointsWithHttpOperationResponse.bind(this), appId, options, callback);
  }

  /**
   * Gets all the available custom prebuilt domains for all cultures.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PrebuiltDomain[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableCustomPrebuiltDomains(): Promise<Models.PrebuiltDomain[]>;
  listAvailableCustomPrebuiltDomains(options: msRest.RequestOptionsBase): Promise<Models.PrebuiltDomain[]>;
  listAvailableCustomPrebuiltDomains(callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
  listAvailableCustomPrebuiltDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
  listAvailableCustomPrebuiltDomains(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PrebuiltDomain[]>): any {
    return msRest.responseToBody(this.listAvailableCustomPrebuiltDomainsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Adds a prebuilt domain along with its models as a new application.
   *
   * @param {PrebuiltDomainCreateObject} prebuiltDomainCreateObject A prebuilt domain create object
   * containing the name and culture of the domain.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject): Promise<string>;
  addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options: msRest.RequestOptionsBase): Promise<string>;
  addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, callback: msRest.ServiceCallback<string>): void;
  addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.addCustomPrebuiltDomainWithHttpOperationResponse.bind(this), prebuiltDomainCreateObject, options, callback);
  }

  /**
   * Gets all the available custom prebuilt domains for a specific culture.
   *
   * @param {string} culture Culture.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PrebuiltDomain[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableCustomPrebuiltDomainsForCulture(culture: string): Promise<Models.PrebuiltDomain[]>;
  listAvailableCustomPrebuiltDomainsForCulture(culture: string, options: msRest.RequestOptionsBase): Promise<Models.PrebuiltDomain[]>;
  listAvailableCustomPrebuiltDomainsForCulture(culture: string, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
  listAvailableCustomPrebuiltDomainsForCulture(culture: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
  listAvailableCustomPrebuiltDomainsForCulture(culture: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PrebuiltDomain[]>): any {
    return msRest.responseToBody(this.listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse.bind(this), culture, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "applicationCreateObject",
    mapper: {
      ...Mappers.ApplicationCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationInfoResponse"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const importMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/import",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.appName
  ],
  requestBody: {
    parameterPath: "luisApp",
    mapper: {
      ...Mappers.LuisApp,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCortanaEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/assistants",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PersonalAssistantsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/domains",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listUsageScenariosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/usagescenarios",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSupportedCulturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/cultures",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableCulture"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const downloadQueryLogsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/querylogs",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  requestBody: {
    parameterPath: "applicationUpdateObject",
    mapper: {
      ...Mappers.ApplicationUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "luis/api/v2.0/apps/{appId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const publishOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/{appId}/publish",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  requestBody: {
    parameterPath: "applicationPublishObject",
    mapper: {
      ...Mappers.ApplicationPublishObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ProductionOrStagingEndpointInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/settings",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationSettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}/settings",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  requestBody: {
    parameterPath: "applicationSettingUpdateObject",
    mapper: {
      ...Mappers.ApplicationSettingUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPublishSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/publishsettings",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublishSettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePublishSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}/publishsettings",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  requestBody: {
    parameterPath: "publishSettingUpdateObject",
    mapper: {
      ...Mappers.PublishSettingUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/endpoints",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAvailableCustomPrebuiltDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/customprebuiltdomains",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrebuiltDomain"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addCustomPrebuiltDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/customprebuiltdomains",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "prebuiltDomainCreateObject",
    mapper: {
      ...Mappers.PrebuiltDomainCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAvailableCustomPrebuiltDomainsForCultureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/customprebuiltdomains/{culture}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.culture
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrebuiltDomain"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
