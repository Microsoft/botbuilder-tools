"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Mappers = require("../models/trainMappers");
const Parameters = require("../models/parameters");
/** Class representing a Train. */
class Train {
    /**
     * Create a Train.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a
     * request asynchronously. To determine whether the training request is successful, submit a GET
     * request to get training status. Note: The application version is not fully trained unless all
     * the models (intents and entities) are trained successfully or are up to date. To verify training
     * success, get the training status at least once after training is complete.
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    trainVersionWithHttpOperationResponse(appId, versionId, options) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, trainVersionOperationSpec);
    }
    /**
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You
     * must call the train API to train the LUIS app before you call this API to get training status.
     * "appID" specifies the LUIS app ID. "versionId" specifies the version number of the LUIS app. For
     * example, "0.1".
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getStatusWithHttpOperationResponse(appId, versionId, options) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, getStatusOperationSpec);
    }
    trainVersion(appId, versionId, options, callback) {
        return msRest.responseToBody(this.trainVersionWithHttpOperationResponse.bind(this), appId, versionId, options, callback);
    }
    getStatus(appId, versionId, options, callback) {
        return msRest.responseToBody(this.getStatusWithHttpOperationResponse.bind(this), appId, versionId, options, callback);
    }
}
exports.Train = Train;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const trainVersionOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/train",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        202: {
            bodyMapper: Mappers.EnqueueTrainingResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getStatusOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/train",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelTrainingInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=train.js.map